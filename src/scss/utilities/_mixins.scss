//? Responsive breakpoint manager
@mixin respond-to($breakpoint) {
   $raw-query: map-get($breakpoints, $breakpoint);

   @if $raw-query {
      $query: if(type-of($raw-query)=='string',
            unquote($raw-query),
            inspect($raw-query));

      @media #{$query} {
         @content;
      }
   }

   @else {
      @error 'No value found for `#{$breakpoint}`. '
      + 'Please make sure it is defined in `$breakpoints` map.';
   }
}

@mixin padding-y($padding) {
   padding-top: $padding;
   padding-bottom: $padding;
}

@mixin padding-x($padding) {
   padding-left: $padding;
   padding-right: $padding;
}

@mixin block($bg-color, $border-color) {
   background-color: $bg-color;
   border: 1px solid $border-color;
   border-bottom: 3px solid $border-color;

   @include respond-to('medium') {
      border: 2px solid $border-color;
      border-bottom: 5px solid $border-color;
   }

   @include respond-to('x-large') {
      border: 3px solid $border-color;
      border-bottom: 8px solid $border-color;
   }
}

@mixin prevent-select-text {
   -webkit-user-select: none;
   -ms-user-select: none;
   user-select: none;
}

@mixin border($common-size, $bottom-size, $color) {
   border: $common-size solid $color;
   border-bottom: $bottom-size solid $color;
}

/* common input styles (sizes, borders) */
@mixin input-base {
   display: block;
   width: 100%;
   padding: .5rem;
   border: none;
   border-radius: .25rem;
   font: inherit;

   @include respond-to('medium') {
      padding: .75rem;
      border-radius: .5rem;
   }

   @include respond-to('large') {
      padding: 1rem;
      border-radius: .75rem;
   }
}

/* props for hiding element */
@mixin hide {
   display: none;
   position: absolute;
   width: 0;
   height: 0;
   opacity: 0;
   pointer-events: none;
   z-index: -999;
}